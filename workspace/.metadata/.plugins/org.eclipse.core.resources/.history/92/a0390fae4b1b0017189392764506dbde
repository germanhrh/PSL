package actions;


import org.openqa.jetty.html.Break;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.interactions.*;

import page.AddCita;
import page.AddDoctor;
import page.AddPaciente;
import page.Inicio;
import util.HerokuappConstant;


public class Action {
	
	private AddPaciente _AddPatient = new AddPaciente();
//	private AddPaciente _mainSearch = new AddPaciente();
	private HerokuappConstant _HerokuappConstant = new HerokuappConstant();
	
//	private HerokuappConstant _expediaConstant = new HerokuappConstant();
	
		
//	private AddPaciente _searchPage = new AddPaciente();
	private AddDoctor _AddDoctor = new AddDoctor();
//	private Login _loginPage = new Login();
//	private MenuPage _menupage = new MenuPage();
//	private FlightsPage _flightpage = new FlightsPage();
	
	private Inicio _Inicio = new Inicio();
	private AddCita _AddCita = new AddCita();
	
	
//    private	String irregularityListText = new String();
//	private String irregularityTextShowed = new String();
//	
	
	public void MoveToElement(WebElement element, WebDriver driver){
		
		Actions actionsDriver = new Actions(driver);
		actionsDriver.moveToElement(element);
	}
	
	public void AddDoctor(String strDoctorName, String strDoctorLastName,
			String strDoctorIdentification, String strDoctorTelephone, 
			String strDoctorIdentificationType, WebDriver driver) throws InterruptedException
		{
		_AddDoctor.getDNameSelector(driver).clear();
		_AddDoctor.getDNameSelector(driver).sendKeys(strDoctorName);
		
		_AddDoctor.getDLastNameSelector(driver).clear();
		_AddDoctor.getDLastNameSelector(driver).sendKeys(strDoctorLastName);
		
		_AddDoctor.getDTelephoneSelector(driver).clear();
		_AddDoctor.getDTelephoneSelector(driver).sendKeys(strDoctorTelephone);
		
		_AddDoctor.getDdentificationTypeSelector(driver).click();
		Select select = new Select(_AddDoctor.getDdentificationTypeSelector(driver));
		if (strDoctorIdentificationType=="Cédula de ciudadanía")
		{
			select.selectByIndex(0);
		}
		else if (strDoctorIdentificationType=="Cédula de extanjería")
		{
			select.selectByIndex(1);
		}
		else if (strDoctorIdentificationType=="Cédula de extanjería")
		{
			select.selectByIndex(2);
		}
		
//		_AddDoctor.getDdentificationTypeSelector(driver).click();
		MoveToElement(_AddDoctor.getDIdentificationSelector(driver), driver);
		_AddDoctor.getDIdentificationSelector(driver);
		_AddDoctor.getDIdentificationSelector(driver).clear();
		_AddDoctor.getDIdentificationSelector(driver).sendKeys(strDoctorIdentification);
		
		_AddDoctor.getDSaveButtonSelector(driver).click();	
		Thread.sleep(4000);
		
		
		}
	
	
	public void AddCita(String strCitaDate, String strCitaDoctor,
			String strCitaPatient, String strCitaObserv, 
			 WebDriver driver) throws InterruptedException
	{
		_AddCita.getCDateSelector(driver).clear();
		_AddCita.getCDateSelector(driver).sendKeys(strCitaDate);
		
		_AddCita.getCIdDoctorSelector(driver).clear();
		_AddCita.getCIdDoctorSelector(driver).sendKeys(strCitaDoctor);
		
		_AddCita.getCIdPatientSelector(driver).clear();
		_AddCita.getCIdPatientSelector(driver).sendKeys(strCitaPatient);
		
		_AddCita.getCObservacionesSelector(driver).clear();
		_AddCita.getCObservacionesSelector(driver).sendKeys(strCitaObserv);
		
		_AddCita.getCSaveButtonSelector(driver).click();
	}
	
	
	
	public void AddPaciente(String strPatientName, String strPatientLastName,
									String strIdentification, String strTelephone, 
									String strIdentificationType, WebDriver driver) throws InterruptedException{
//		
		
		WebDriverWait waitLoading = new WebDriverWait(driver, _HerokuappConstant.getStandardWait());
		
		_AddPatient.getPNameSelector(driver).clear();
		_AddPatient.getPNameSelector(driver).sendKeys(strPatientName);
		
		_AddPatient.getPLastNameSelector(driver).clear();
		_AddPatient.getPLastNameSelector(driver).sendKeys(strPatientLastName);
		
		_AddPatient.getPTelephoneSelector(driver).clear();
		_AddPatient.getPTelephoneSelector(driver).sendKeys(strTelephone);
		
		_AddPatient.getPIdentificationTypeSelector(driver).click();
		Select select=new Select(_AddPatient.getPIdentificationTypeSelector(driver));
		
		if (strIdentificationType=="Cédula de ciudadanía")
		{
			select.selectByIndex(0);
		}
		else if (strIdentificationType=="Cédula de extanjería")
		{
			select.selectByIndex(1);
		}
		else if (strIdentificationType=="Cédula de extanjería")
		{
			select.selectByIndex(2);
		}

//		_AddPatient.getPIdentificationTypeSelector(driver).click();
		
		_AddPatient.getPIdentificationSelector(driver).clear();
		_AddPatient.getPIdentificationSelector(driver).sendKeys(strIdentification);
		
		_AddPatient.getPSaveButtonSelector(driver).click();
		
		
//		_searchPage.getFlightTypePanelSelector(driver).click();
//		_searchPage.getFlightTypeOptionSelector(driver).click();
//		_searchPage.getFlyingFromSelector(driver).click();
//		_searchPage.getFlyingFromSelector(driver).clear();
//		_searchPage.getFlyingFromSelector(driver).sendKeys(strDeparturePlace);
//		_searchPage.getFlyingToSelector(driver).click();
//		_searchPage.getFlyingToSelector(driver).clear();
//		_searchPage.getFlyingToSelector(driver).sendKeys(strArrivePlace);
//		_searchPage.getFlyDepartureDateSelector(driver).click();
//		_searchPage.getFlyDepartureDateSelector(driver).clear();
//		_searchPage.getFlyDepartureDateSelector(driver).sendKeys(strDepartingDate);
//		_searchPage.getFlyReturnDateSelector(driver).click();
//		_searchPage.getFlyReturnDateSelector(driver).clear();
//		_searchPage.getFlyReturnDateSelector(driver).sendKeys(strReturningDate);
//		_searchPage.getFlySearchButtonSelector(driver).click();		
//		waitLoading.until(ExpectedConditions.invisibilityOfElementLocated(By.cssSelector(_mainSearch.getPrimaryMsgSelectorCssPath())));
//				
	

//	}
//	
//	public void logOutUser(WebDriver driver){
//			
//		_menupage.getPageLogOutElement(driver).click();
//		_menupage.getPageAcceptLogOutElement(driver).click();
		}
	
	public void ClickMenuInicio(int OpcionMenu, WebDriver driver) throws InterruptedException{
		
		switch (OpcionMenu) {
        case 1:  
        	_Inicio.getIAddDoctorSelector(driver).click();
        	Thread.sleep(4000);
        	break;
        case 2: 	
        	_Inicio.getIAddPatientSelector(driver).click();
        	break;
        case 3:
        	_Inicio.getIAppointmentSchedulingSelector(driver).click();
		}
	}
	
	
	public void ClickInicio(WebDriver driver) throws InterruptedException{
		
		
	}
//	public void sortByHighestPrice(WebDriver driver, String strHighestPrice){
//		
//		WebDriverWait waitLoading = new WebDriverWait(driver, _HerokuappConstant.getStandardWait());
//		_flightsSearch.getSortComboBox(driver).click();
//		Select select=new Select(_flightsSearch.getSortComboBox(driver));
////		if (strHighestPrice == "Price (Lowest)"){
////			select.selectByIndex(0);
////		}
//		 if(strHighestPrice == "Price (Highest)"){
//			select.selectByIndex(1);
//		}
//		
//		else if(strHighestPrice == "Duration (Shortest)"){
//			select.selectByIndex(2);
//		}
//		
//		else if(strHighestPrice == "Duration (Longest)"){
//			select.selectByIndex(3);
//		}
//		
//		_flightsSearch.getFlySearchButtonSelector(driver).click();
//		waitLoading.until(ExpectedConditions.invisibilityOfElementLocated(By.cssSelector(_mainSearch.getPrimaryMsgSelectorCssPath())));
//		
//	}
	
//	public void waitElements(WebDriver driver){
//		
//		WebDriverWait waitFlights = new WebDriverWait(driver, 15);
//		 waitFlights.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(BLOCK_UI_MSG)));
//		 waitFlights.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(BLOCK_UI_OVERLAY)));
//		 waitFlights.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(FLIGHTS_OPTION)));
//		 
//		_menupage.getFlightsOption(driver).click();
//		
//		waitFlights.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(BLOCK_UI_MSG)));
//		waitFlights.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(BLOCK_UI_OVERLAY)));
//		
//		waitFlights.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(IRREGULARITIES_FILTER)));
//		
//		
//		_flightpage.getFilterIrregularities(driver).click();
//		
//		waitFlights.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(BLOCK_UI_MSG)));
//		waitFlights.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(BLOCK_UI_OVERLAY)));
//		
//		
//		_flightpage.getAscendentFilterIrregularities(driver).click();
//		
//		waitFlights.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(BLOCK_UI_OVERLAY)));
//		waitFlights.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(BLOCK_UI_MSG)));
//		 waitFlights.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(CHECKS_ELEMENT)));
//		
//		
//	}
//	public String getFlightsDelayed(WebDriver driver) throws InterruptedException{
//		
//		 WebDriverWait waitFlights = new WebDriverWait(driver, 15);
//		 
//		 waitElements(driver);
//		 
//		 waitFlights.until(ExpectedConditions.elementToBeClickable(By.xpath(CHECKS_ELEMENT)));
//		
//		_flightpage.checkFlights(driver).get(1).click();
//		
//		waitFlights.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(BLOCK_UI_OVERLAY)));
//		waitFlights.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(BLOCK_UI_MSG)));
//		waitFlights.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(RED_BUTTON_POST)));
//		
//		
//		_flightpage.getEstablishCause(driver).click();
//		
//		waitFlights.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(BLOCK_UI_OVERLAY)));
//		waitFlights.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(BLOCK_UI_MSG)));
//		
//		
//		
//	
//		waitFlights.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(IRREGULARITY_ELEMENT1)));
//		_flightpage.getCause1(driver).click();
//		
//		_flightpage.getCommentBox(driver).clear();
//		_flightpage.getCommentBox(driver).sendKeys(IRREGULARITY_COMMENT);
//		
//		irregularityListText = _flightpage.getIrregularityText(driver).getText();
//		
//		
//		_flightpage.postIrregularity(driver).click();
//		
//		waitFlights.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(BLOCK_UI_OVERLAY)));
//		waitFlights.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(ANOTHER_BLOCKING_PAGE)));
//		
//		return irregularityListText;
//		
//		
//	}
//	
//	public String getIrregularityCauseText(WebDriver driver) throws InterruptedException{
//		
//		waitElements(driver);
//		
//		irregularityTextShowed = _flightpage.getIrregularityCauseText(driver).getText();
//		
//		
//		return irregularityTextShowed;
//	}
	

}
